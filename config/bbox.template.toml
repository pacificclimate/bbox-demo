[webserver]
loglevel = "Warn"

[webserver.cors]
allow_all_origins = true

[[datasource]]
name = "postgis_db"
[datasource.postgis]
url = "${BBOX_DB_DSN}"

[[collection]]
name = "lakes"
title = "Lakes"
description = "Lake features"
[collection.postgis]
datasource = "postgis_db"
sql = """
SELECT 
    Uid, 
    SubId,
    DowSubId,
    ST_AsGeoJSON(ST_SetSRID(geom, 3005)) AS geojson 
FROM lakes 
"""
fid_field = "subid"
geometry_field = "geojson"
queryable_fields = ["Uid","SubId","DowSubId"]

[[collection]]
name = "rivers"
title = "Rivers"
description = "Rivers Features"
[collection.postgis]
datasource = "postgis_db"
sql = """
SELECT 
    Uid, 
    SubId, 
    IsLake, 
    DowSubId, 
    ST_AsGeoJSON(ST_SetSRID(geom, 3005)) AS geojson 
FROM rivers 
"""
fid_field = "subid"
geometry_field = "geojson"
queryable_fields = ["Uid","SubId","DowSubId"]

[[collection]]
name = "upstreams"
title = "Upstreams"
description = "Upstream Watershed Features"
[collection.postgis]
datasource = "postgis_db"
sql = """
WITH RECURSIVE drainage(subid, downsubid, uid, mouth) AS (
  WITH segments(subid, dowsubid, uid) AS (
    SELECT subid, dowsubid, uid FROM lakes
    UNION
    SELECT subid, dowsubid, uid FROM rivers
  )

    SELECT subid, dowsubid, uid, subid AS mouth
    FROM segments

    UNION ALL

    SELECT segments.subid, segments.dowsubid, segments.uid, drainage.mouth
    FROM drainage, segments
    WHERE drainage.subid = segments.dowsubid)

SELECT mouth AS subid, 
  array_agg(uid) AS upstream_uids, 
  ST_AsGeoJSON(ST_SetSRID(ST_Point(52.628, -118.430, 4326), 3005)) AS origin 
FROM drainage GROUP BY mouth
"""
fid_field = "subid"
geometry_field = "origin"
queryable_fields = ["SubId"]

[[collection]]
name="downstreams"
title="Downstreams"
description="Downstream Path Features"
[collection.postgis]
datasource="postgis_db"
sql = """
WITH RECURSIVE course(subid, downsubid, uid, origin) AS (
  WITH segments(subid, dowsubid, uid) AS (
    SELECT subid, dowsubid, uid FROM lakes
    UNION
    SELECT subid, dowsubid, uid FROM rivers
  )

    SELECT subid, dowsubid, uid, subid AS origin
    FROM segments

    UNION ALL

    SELECT segments.subid, segments.dowsubid, segments.uid, course.origin
    FROM course, segments
    WHERE course.downsubid = segments.subid)
SELECT origin AS subid,
  array_agg(uid) AS downstream_uids,
  ST_AsGeoJSON(ST_SetSRID(ST_Point(49.1778, -123.241, 4326), 3005)) AS mouth
FROM course GROUP BY origin
"""
fid_field = "subid"
geometry_field = "mouth"
queryable_fields = ["SubId"]

[[grid]]
json = "assets/BCAlbersCustomGrid.json"

[[tileset]]
name = "water_tiles"

[[tileset.cache_control]]
max_age = 86400 # Cache for 1 day
minzoom = 0
maxzoom = 12

[[tileset.tms]]
id = "BCAlbersCustomGrid"

[tileset.postgis]
datasource = "postgis_db"
extent = [217522, 376304, 5660707, 4543560]

# Rivers Layer
[[tileset.postgis.layer]]
name = "rivers"
geometry_type = "LINESTRING"

[[tileset.postgis.layer.query]]
sql = """
  SELECT  Uid, SubId, DowSubId, ST_SetSRID(geom, 3005) AS geom
  FROM rivers
  WHERE geom && ST_MakeEnvelope($1, $2, $3, $4, 3005)
"""

# Lakes Layer
[[tileset.postgis.layer]]
name = "lakes"
geometry_type = "POLYGON"

[[tileset.postgis.layer.query]]
sql = """
  SELECT Uid, SubId, IsLake, ST_SetSRID(geom, 3005) AS geom
  FROM lakes
  WHERE geom && ST_MakeEnvelope($1, $2, $3, $4, 3005)
"""

